import random

print("GROUP PICKER 3000")
print("----------------------")

GPrunning = True
while GPrunning:
    students = [
        "Aidan", "Marcos", "Isabella", "Ryan", "Mason", "Jaiden", "Shahood", "Sean",
        "Leo", "Chris", "Nathan", "Gavin", "Devin", "Antonio", "Chu", "Jarred",
        "Muntag", "Carrell", "Jackson", "Asher"
    ]

    print("Students List:", students, "\n")

    # Initialize the restrictions to an empty set to avoid errors
    firstRestrictions = set()
    secondRestrictions = set()

    # Restriction handling
    while True:
        restrictedQuestion = input("Are there any students that need to be separated? (Y/N): ")

        if restrictedQuestion == "Y" or restrictedQuestion == "y":
            # Restriction pair 1
            while True:
                restrictedinput1 = input("Please input the first restricted student in pair 1 (Ex. Aidan): ")
                if restrictedinput1 in students:
                    break
                elif restrictedinput1 == "None" or restrictedinput1 == "none":
                    break
                else:
                    print("Invalid Name!")

            while True:
                restrictedinput2 = input("Please input the second restricted student in pair 1 (Ex. Marcos): ")
                if restrictedinput2 in students:
                    break
                elif restrictedinput2 == "None" or restrictedinput2 == "none":
                    break
                else:
                    print("Invalid Name!")

            restrictedStudent1 = '"' + restrictedinput1 + '"'
            restrictedStudent2 = '"' + restrictedinput2 + '"'
            firstRestrictions = {(restrictedStudent1, restrictedStudent2)}

            restrictedQuestion2 = input("Is there another pair of students that need separation? (Y/N): ")

            if restrictedQuestion2 == "Y" or restrictedQuestion2 == "y":
                # Restriction pair 2
                while True:
                    restrictedinput3 = input("Please input the first restricted student in pair 2 (Ex. Chris): ")
                    if restrictedinput3 in students:
                        break
                    elif restrictedinput3 == "None" or restrictedinput3 == "none":
                        break
                    else:
                        print("Invalid Name!")

                while True:
                    restrictedinput4 = input("Please input the second restricted student in pair 2 (Ex. Nathan): ")
                    if restrictedinput4 in students:
                        break
                    elif restrictedinput4 == "None" or restrictedinput4 == "none":
                        break
                    else:
                        print("Invalid Name!")

                restrictedStudent3 = '"' + restrictedinput3 + '"'
                restrictedStudent4 = '"' + restrictedinput4 + '"'
                secondRestrictions = {(restrictedStudent3, restrictedStudent4)}

        elif restrictedQuestion == "N" or restrictedQuestion == "n":
            break  # No restrictions, move to group selection.
        else:
            print("Invalid Input!")

        # Check if there is a second restriction question
        if restrictedQuestion2 == "N" or restrictedQuestion2 == "n":
            break  # No further restrictions, proceed to group selection.

    # Only merge restrictions if there were any restrictions set
    if firstRestrictions or secondRestrictions:
        allRestrictions = firstRestrictions | secondRestrictions  # Merging restrictions
    else:
        allRestrictions = set()  # No restrictions if none were set

    groupsWork = False  # Need to ensure groups follow restrictions

    # Group selection
    while True:
        userInput = input("Enter the number of students per group (2, 3, 4): ")

        if userInput == '2':
            # Code for creating groups of two students
            while not groupsWork:
                random.shuffle(students)
                groups2 = [students[i:i+2] for i in range(0, len(students), 2)]  # Dividing the list into groups of 2
                groupsWork = True

                for group in groups2:  # Checking all possible combinations of students
                    if len(group) == 2:
                        a, b = group
                        if (a, b) in allRestrictions or (b, a) in allRestrictions:  # If restrictions apply, reset
                            groupsWork = False
                            break

            print("Groups of 2:")
            for group in groups2:
                print(" ".join(str(x) for x in group))
            break

        elif userInput == '3':
            # Code for groups of 3
            while not groupsWork:
                random.shuffle(students)
                groups3 = [students[i:i+3] for i in range(0, len(students), 3)]  # Dividing the list into groups of 3

                if len(students) % 3 == 2:  # Checks remainder of students, ensures it equals 2
                    lastGroup = groups3.pop()  # Removes the last group using pop()
                    remainingStudents = lastGroup
                    for group in groups3:
                        if len(group) == 3:  # Checking all possible combinations
                            a, b, c = group
                            if ((a, b) in allRestrictions or (b, a) in allRestrictions or
                                    (a, c) in allRestrictions or (c, a) in allRestrictions or
                                    (b, c) in allRestrictions or (c, b) in allRestrictions):
                                groupsWork = False

                    if len(remainingStudents) == 2:  # Distribute remaining students
                        group1 = groups3[-1] + [remainingStudents[0]]
                        group2 = groups3[-2] + [remainingStudents[1]]
                        groups3[-1] = group1
                        groups3[-2] = group2
                        groupsWork = True
                    else:
                        groupsWork = False

            print("Groups of 3:")
            for group in groups3:
                print(" ".join(str(x) for x in group))
            break

        elif userInput == '4':
            # Code for groups of 4
            while not groupsWork:
                random.shuffle(students)
                groups4 = [students[i:i+4] for i in range(0, len(students), 4)]  # Dividing the list into groups of 4
                groupsWork = True

                for group in groups4:
                    if len(group) == 4:  # Checking all possible combinations
                        a, b, c, d = group
                        if ((a, b) in allRestrictions or (b, a) in allRestrictions or
                                (a, c) in allRestrictions or (c, a) in allRestrictions or
                                (a, d) in allRestrictions or (d, a) in allRestrictions or
                                (b, c) in allRestrictions or (c, b) in allRestrictions or
                                (b, d) in allRestrictions or (d, b) in allRestrictions or
                                (c, d) in allRestrictions or (d, c) in allRestrictions):
                            groupsWork = False
                            break

            print("Groups of 4:")
            for group in groups4:
                print(" ".join(str(x) for x in group))
            break

        else:
            print("Input must be in groups of 2, 3, or 4.")
            continue

    # Ask for continuation, if Y, the code loops; if N, the code stops.
    while True:
        gameContinue = input("Would you like to reselect groups? (Y/N): ")
        print("\n")

        if gameContinue == 'Y':
            GPrunning = True
            break  # Ends the loop and moves to the top of the outer while loop.

        elif gameContinue == 'N':
            GPrunning = False
            break  # Ends the loop and stops the program.

        else:
            print("Answer must be Y or N.")
